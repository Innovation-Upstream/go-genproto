// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mailgun_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailgunInterfaceRPCClient is the client API for MailgunInterfaceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailgunInterfaceRPCClient interface {
	SendTemplateEmails(ctx context.Context, in *SendTemplateEmailsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendHTMLEmails(ctx context.Context, in *SendHTMLEmailsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mailgunInterfaceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMailgunInterfaceRPCClient(cc grpc.ClientConnInterface) MailgunInterfaceRPCClient {
	return &mailgunInterfaceRPCClient{cc}
}

func (c *mailgunInterfaceRPCClient) SendTemplateEmails(ctx context.Context, in *SendTemplateEmailsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/innovationupstream.service.data.interface.mailgun_interface.v1beta1.MailgunInterfaceRPC/SendTemplateEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailgunInterfaceRPCClient) SendHTMLEmails(ctx context.Context, in *SendHTMLEmailsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/innovationupstream.service.data.interface.mailgun_interface.v1beta1.MailgunInterfaceRPC/SendHTMLEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailgunInterfaceRPCServer is the server API for MailgunInterfaceRPC service.
// All implementations should embed UnimplementedMailgunInterfaceRPCServer
// for forward compatibility
type MailgunInterfaceRPCServer interface {
	SendTemplateEmails(context.Context, *SendTemplateEmailsRequest) (*emptypb.Empty, error)
	SendHTMLEmails(context.Context, *SendHTMLEmailsRequest) (*emptypb.Empty, error)
}

// UnimplementedMailgunInterfaceRPCServer should be embedded to have forward compatible implementations.
type UnimplementedMailgunInterfaceRPCServer struct {
}

func (UnimplementedMailgunInterfaceRPCServer) SendTemplateEmails(context.Context, *SendTemplateEmailsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTemplateEmails not implemented")
}
func (UnimplementedMailgunInterfaceRPCServer) SendHTMLEmails(context.Context, *SendHTMLEmailsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHTMLEmails not implemented")
}

// UnsafeMailgunInterfaceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailgunInterfaceRPCServer will
// result in compilation errors.
type UnsafeMailgunInterfaceRPCServer interface {
	mustEmbedUnimplementedMailgunInterfaceRPCServer()
}

func RegisterMailgunInterfaceRPCServer(s grpc.ServiceRegistrar, srv MailgunInterfaceRPCServer) {
	s.RegisterService(&MailgunInterfaceRPC_ServiceDesc, srv)
}

func _MailgunInterfaceRPC_SendTemplateEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTemplateEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailgunInterfaceRPCServer).SendTemplateEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/innovationupstream.service.data.interface.mailgun_interface.v1beta1.MailgunInterfaceRPC/SendTemplateEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailgunInterfaceRPCServer).SendTemplateEmails(ctx, req.(*SendTemplateEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailgunInterfaceRPC_SendHTMLEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHTMLEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailgunInterfaceRPCServer).SendHTMLEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/innovationupstream.service.data.interface.mailgun_interface.v1beta1.MailgunInterfaceRPC/SendHTMLEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailgunInterfaceRPCServer).SendHTMLEmails(ctx, req.(*SendHTMLEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailgunInterfaceRPC_ServiceDesc is the grpc.ServiceDesc for MailgunInterfaceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailgunInterfaceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "innovationupstream.service.data.interface.mailgun_interface.v1beta1.MailgunInterfaceRPC",
	HandlerType: (*MailgunInterfaceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTemplateEmails",
			Handler:    _MailgunInterfaceRPC_SendTemplateEmails_Handler,
		},
		{
			MethodName: "SendHTMLEmails",
			Handler:    _MailgunInterfaceRPC_SendHTMLEmails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/data/interface/mailgun-interface/v1beta1/mailgun_interface_service.proto",
}
