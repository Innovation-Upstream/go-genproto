// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service_routing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceRoutingRPCClient is the client API for ServiceRoutingRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRoutingRPCClient interface {
	GetEndpointForServices(ctx context.Context, in *GetEndpointForServicesRequest, opts ...grpc.CallOption) (*GetEndpointForServicesResponse, error)
}

type serviceRoutingRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRoutingRPCClient(cc grpc.ClientConnInterface) ServiceRoutingRPCClient {
	return &serviceRoutingRPCClient{cc}
}

func (c *serviceRoutingRPCClient) GetEndpointForServices(ctx context.Context, in *GetEndpointForServicesRequest, opts ...grpc.CallOption) (*GetEndpointForServicesResponse, error) {
	out := new(GetEndpointForServicesResponse)
	err := c.cc.Invoke(ctx, "/innovationupstream.service.control.service_routing.v1beta1.ServiceRoutingRPC/GetEndpointForServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRoutingRPCServer is the server API for ServiceRoutingRPC service.
// All implementations should embed UnimplementedServiceRoutingRPCServer
// for forward compatibility
type ServiceRoutingRPCServer interface {
	GetEndpointForServices(context.Context, *GetEndpointForServicesRequest) (*GetEndpointForServicesResponse, error)
}

// UnimplementedServiceRoutingRPCServer should be embedded to have forward compatible implementations.
type UnimplementedServiceRoutingRPCServer struct {
}

func (UnimplementedServiceRoutingRPCServer) GetEndpointForServices(context.Context, *GetEndpointForServicesRequest) (*GetEndpointForServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointForServices not implemented")
}

// UnsafeServiceRoutingRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRoutingRPCServer will
// result in compilation errors.
type UnsafeServiceRoutingRPCServer interface {
	mustEmbedUnimplementedServiceRoutingRPCServer()
}

func RegisterServiceRoutingRPCServer(s grpc.ServiceRegistrar, srv ServiceRoutingRPCServer) {
	s.RegisterService(&ServiceRoutingRPC_ServiceDesc, srv)
}

func _ServiceRoutingRPC_GetEndpointForServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointForServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRoutingRPCServer).GetEndpointForServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/innovationupstream.service.control.service_routing.v1beta1.ServiceRoutingRPC/GetEndpointForServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRoutingRPCServer).GetEndpointForServices(ctx, req.(*GetEndpointForServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRoutingRPC_ServiceDesc is the grpc.ServiceDesc for ServiceRoutingRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRoutingRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "innovationupstream.service.control.service_routing.v1beta1.ServiceRoutingRPC",
	HandlerType: (*ServiceRoutingRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEndpointForServices",
			Handler:    _ServiceRoutingRPC_GetEndpointForServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/control/service-routing/v1beta1/service_routing.proto",
}
